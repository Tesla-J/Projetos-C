	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	// Definição dos tipos 'itemDaLista' e 'listaEncadeada'
	typedef struct item {
		int codigo;
		struct item *pMaior;
		struct item *pMenor;
	} itemDaArvore;

	typedef struct arvore{
		itemDaArvore *root;
		int tamanho;
	} arvoreBinaria;

	// Prototipação das funções
	void inicializacao (arvoreBinaria*);


	// Desenvolvimento das funções

	// Inicializa um lista vazia.
	void inicializacao (arvoreBinaria *arvore){
		arvore->root = NULL;
		arvore->tamanho = 0;
	}

	int inserirRaiz(arvoreBinaria* arvore,int codigo)
	{
		itemDaArvore* novoItem;	
		novoItem = (itemDaArvore* ) malloc (sizeof (itemDaArvore));
		if (novoItem == NULL) {
			return -1;
		}
		novoItem->codigo = codigo;
		arvore->root = novoItem;
		arvore->root->pMaior = NULL;
		arvore->root->pMenor = NULL;
		arvore->tamanho++;
		return 0;
	}

	int inserir(arvoreBinaria* arvore, int codigo)
	{
		itemDaArvore* novoItem;	
		itemDaArvore* atualItem;	
		novoItem = (itemDaArvore* ) malloc (sizeof (itemDaArvore));
		if (novoItem == NULL) {
			return -1;
		}
		novoItem->codigo = codigo;
		
		if(novoItem->codigo > arvore->root->codigo){
			atualItem = arvore->root->pMaior;
			while(atualItem->codigo < novoItem->codigo)
				{
					if(atualItem->pMaior == NULL)
					{
						atualItem->pMaior = atualItem;
						atualItem->pMaior->pMaior  = NULL;
						atualItem->pMaior->pMenor  = NULL; 
						break;
					}			
					atualItem = atualItem->pMaior;
				}
				if(atualItem->codigo > novoItem->codigo)
			{
					atualItem->pMenor = novoItem;
			}
		}
		else{
			atualItem = arvore->root;			
			while(atualItem->codigo > novoItem->codigo)
				{
					if(atualItem->pMenor == NULL)
					{
						atualItem->pMenor = novoItem;
						atualItem->pMenor->pMaior  = NULL;
						atualItem->pMenor->pMenor  = NULL; 						
						break;
					} 
					atualItem = atualItem->pMenor;
				}
			if(atualItem->codigo < novoItem->codigo)
			{
					atualItem->pMaior = novoItem;
			}
			
		}
		arvore->tamanho++;
		return 0;
	}

	void percorrer(arvoreBinaria* arvore)
	{
		itemDaArvore* noAtual;
		noAtual = arvore->root;
		while(noAtual->pMenor != NULL)
		{
			
			printf("%d,", noAtual->codigo);
			noAtual = noAtual->pMenor;
		}
	}

	int main(){
		arvoreBinaria *minhaArvore;
		minhaArvore = (arvoreBinaria*) malloc (sizeof (arvoreBinaria));
		if (minhaArvore == NULL) {
			printf("Não foi possível alocar memória\n");
			return -1;
		}
		inicializacao(minhaArvore);
		inserirRaiz(minhaArvore, 28);
		inserir(minhaArvore, 26);
		inserir(minhaArvore, 27);
		inserir(minhaArvore, 25);
		inserir(minhaArvore, 24);
		inserir(minhaArvore, 23);		
		inserir(minhaArvore, 22);
		percorrer(minhaArvore);
		return 0;
	}
