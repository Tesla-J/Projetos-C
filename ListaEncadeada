#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// DefiniÃ§Ã£o dos tipos 'itemDaLista' e 'listaEncadeada'
typedef struct item {
    int codigo;
    char* nome;
    int idade;
    struct item *pProx;
} itemDaLista;

typedef struct lista{
    itemDaLista *inicio;
    int tamanho;
} listaEncadeada;

// PrototipaÃ§Ã£o das funÃ§Ãµes
void inicializacao (listaEncadeada*);
int inserirPrimeiro(listaEncadeada*, int, char* , int);
void percorrerLista(listaEncadeada*);


// Desenvolvimento das funÃ§Ãµes

// Inicializa um lista vazia.
void inicializacao (listaEncadeada *lista){
    lista->inicio = NULL;
    lista->tamanho = 0;
}

int inserirPrimeiro(listaEncadeada* lista, int cod, char* nome, int idade)
{
    itemDaLista* novoItem;
    novoItem = (itemDaLista* ) malloc (sizeof (itemDaLista));
    if (novoItem == NULL) {
        return -1;
    }
    novoItem->codigo = cod;
    novoItem->nome = (char*) malloc (50 * sizeof (char));
    strcpy(novoItem->nome, nome);
    novoItem->idade = idade;
    novoItem->pProx = lista->inicio;
    lista->inicio = novoItem;
    lista->tamanho++;
    return 0;
}

int removerUltimo(listaEncadeada* lista)
{
    if (lista->inicio == NULL)
        return -1;
    else if(lista->inicio->pProx == NULL)
    {
        lista->inicio = NULL;
        return 0;
    }
    else
    {
        itemDaLista* noAtual = lista->inicio;
        while (noAtual->pProx->pProx != NULL)
            noAtual = noAtual->pProx;
        noAtual->pProx = NULL;
        free(noAtual->pProx);
        lista->tamanho--;
        return 0;
    }
}

int inserir(listaEncadeada* lista, int cod, char* nome, int idade)
{
    itemDaLista* novoItem;
    novoItem = (itemDaLista*) malloc (sizeof (itemDaLista));
    if (novoItem == NULL)
    {
        printf("NÃ£o foi possÃ­vel alocar espaÃ§o de memÃ³ria\n");
        return -1;
    }
    novoItem->codigo = cod;
    novoItem->nome = (char* ) malloc (50 * sizeof(char));
    strcpy(novoItem->nome,nome);
    novoItem->idade = idade;

    if(lista->inicio == NULL || lista->inicio->codigo > novoItem->codigo)
        inserirPrimeiro(lista, novoItem->codigo, novoItem->nome, novoItem->idade);
    else
    {
        itemDaLista* noAtual = lista->inicio;

        while (noAtual->pProx != NULL && noAtual->pProx->codigo < novoItem->codigo)
             noAtual = noAtual->pProx;

        novoItem->pProx = noAtual->pProx;
        noAtual->pProx = novoItem;
        lista->tamanho++;
    }
    return 0;
}

int remover(listaEncadeada* lista, int cod)
{
    itemDaLista* noAtual = lista->inicio;

    while (noAtual->pProx->codigo != cod)
         noAtual = noAtual->pProx;

    itemDaLista* noRemoved = noAtual->pProx;
    noAtual->pProx = noRemoved->pProx;
    free(noRemoved);
    lista->tamanho--;
    return 0;
}

void emptyLista(listaEncadeada* lista)
{
    while(lista->inicio != NULL)
        removerUltimo(lista);
}

void percorrerLista(listaEncadeada* lista){
    if (lista->inicio == NULL) {
        printf("Lista vazia!\n");
    } else {
        printf ("---- Elementos da Lista ----- \n");
        itemDaLista* noAtual = lista->inicio;
        while (noAtual != NULL) {
            printf("Elemento %d - Nome %s - Idade %d\n", noAtual->codigo, noAtual->nome, noAtual->idade);
            noAtual = noAtual->pProx;
        }
        printf ("---- Fim da Lista ----- \n");
    }
}

int main(){
    listaEncadeada *minhaPrimeiraLista;
    minhaPrimeiraLista = (listaEncadeada*) malloc (sizeof (listaEncadeada));
    if (minhaPrimeiraLista == NULL) {
        printf("NÃ£o foi possÃ­vel alocar memÃ³ria\n");
        return -1;
    }
    inicializacao(minhaPrimeiraLista);
    percorrerLista(minhaPrimeiraLista);
    inserir(minhaPrimeiraLista, 10, "Eduardo", 20);
    inserir(minhaPrimeiraLista, 15, "Marcio", 20);
    inserir(minhaPrimeiraLista, 25, "Cesar", 20);
    inserir(minhaPrimeiraLista, 7, "Leo", 20);
    percorrerLista(minhaPrimeiraLista);

    emptyLista(minhaPrimeiraLista);
    percorrerLista(minhaPrimeiraLista);

    inserir(minhaPrimeiraLista, 7, "Leo", 20);
    percorrerLista(minhaPrimeiraLista);
    return 0;
}
